"""
文件操作的作用就是把一些数据存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力
"""
'''
open(name,mode):打开一个已经存在的文件或者创建一个新文件
name是要打开的目标文件名的字符串，可以包含文件所在的具体路径
mode设置打开文件的模式(访问模式)：只读，写入，追加
mode的分类：
r:文本格式只读方式打开文件，文件指针放在文件开头，这是默认模式，如果文件不存在，则报错
rb:二进制格式只读方式打开文件，文件指针放在文件开头，这是默认模式，如果文件不存在，则报错
r+:文本格式读写方式打开文件，文件指针放在文件开头，如果文件不存在，则报错
rb+:二进制格式读写方式打开文件，文件指针放在文件开头，如果文件不存在，则报错
w:文本格式只写方式打开文件，如果文件已存在，则会清空文件内容，文件指针在文件开头用以写入，如果文件不存在，则创建新文件
wb:对比w，二进制格式
w+:文本格式读写方式打开文件，如果文件已存在，则会清空文件内容，文件指针在文件开头用以写入，如果文件不存在，则创建新文件
wb+:对比w+，二进制格式
a:文本格式追加方式打开文件，如果文件已存在，文件指针在文件结尾用以追加新内容，如果文件不存在，则创建新文件
ab:对比a，二进制格式
a+:文本格式读写方式打开文件，如果文件已存在，文件指针在文件结尾用以追加新内容，如果文件不存在，则创建新文件
ab+:对比a+，二进制格式
'''
f = open('test.txt', 'w')
# 此时的f是open函数的文件对象
'''
文件对象方法
文件对象.write('内容')    一次只能写一个字符串。若要写入多个数据，只能使用多个语句。参数只能是字符串，使用其他类型的数据均会出错。
文件对象.writelines(字符串列表)     将存放在列表中的多行数据一次性写入文本文件
文件对象.read(num)
num表示要从文件中读取的数据的长度(单位是字节)，如果没有传入num，则读取文件中所有数据
文件对象.readlines():按照行的方式把整个文件内容一次性获取，返回一个列表，列表的每一个元素为文件的每一行的数据
文件对象.readline():一次读取一行内容
文件对象.tell():返回一个整数，表示当前文件指针的位置(到文件开头的比特数)
文件对象.seek(偏移量,起始位置)：用来移动文件指针
0：文件开头          1：当前位置          2：文件结尾
文件对象.close():关闭文件
'''
f.write('hello world')
f.close()
f = open('test.txt', 'a')
f.write('\n123')
f.close()
f = open('test.txt', 'r')
print(f.read(13))  # 换行占一个换行符
print(f.read())
print(type(f.read()))
f.close()
f = open('test.txt', 'r')
print(f.read())
f.close()
f = open('test.txt', 'r')
print(f.readlines())
f.close()
f = open('test.txt', 'r')
print(f.readline())
# 注意这里print自带一个换行，读取也读到了一个换行，所以两次换行
print(f.readline())
f.close()
print('-' * 10)
f = open('test.txt', 'r+')
f.seek(6, 0)
print(f.read())
print(f.tell())
f.close()
